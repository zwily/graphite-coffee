// Generated by CoffeeScript 1.3.1

describe('GraphiteUrl', function() {
  var g;
  g = null;
  beforeEach(function() {
    return g = new GraphiteUrl("http://example.com/");
  });
  it('renders a url', function() {
    var url;
    g.target(function() {
      return g.sumSeries(g.s('series1'), g.s('series2'));
    });
    url = g.render();
    return expect(url).toBe('http://example.com/?&target=sumSeries(series1,series2)');
  });
  it('expands array arguments', function() {
    var url;
    g.target(function() {
      return g.sumSeries([g.s('series1'), g.s('series2')]);
    });
    url = g.render();
    return expect(url).toBe('http://example.com/?&target=sumSeries(series1,series2)');
  });
  it('stringifies string arguments', function() {
    var url;
    g.target(function() {
      return g.alias(g.s('series'), 'my series');
    });
    url = g.render();
    return expect(url).toBe('http://example.com/?&target=alias(series,\'my series\')');
  });
  it('relocates serieslists to the front of arguments', function() {
    var url;
    g.target(function() {
      return g.alias("my series", function() {
        return g.s('series');
      });
    });
    url = g.render();
    return expect(url).toBe('http://example.com/?&target=alias(series,\'my series\')');
  });
  it('relocates seriesLists to the front that are embedded in other calls', function() {
    var url;
    g.target(function() {
      return g.alias("my sum", function() {
        return g.sumSeries(g.s('series1'), g.s('series2'));
      });
    });
    url = g.render();
    return expect(url).toBe('http://example.com/?&target=alias(sumSeries(series1,series2),\'my sum\')');
  });
  it('correctly stringifies integer arguments', function() {
    var url;
    g.target(function() {
      return g.movingAverage(g.s('series'), 50);
    });
    url = g.render();
    return expect(url).toBe('http://example.com/?&target=movingAverage(series,50)');
  });
  it('correctly relocates integer arguments', function() {
    var url;
    g.target(function() {
      return g.movingAverage(50, function() {
        return g.sumSeries(g.s('series1'), g.s('series2'));
      });
    });
    url = g.render();
    return expect(url).toBe('http://example.com/?&target=movingAverage(sumSeries(series1,series2),50)');
  });
  return it('should render the example from README.md', function() {
    var clusters, realUrl, url, _capacity, _load;
    g = new GraphiteUrl("https://graphite.example.com/render/", {
      title: 'Cluster Overprovisioning',
      width: 1000,
      from: '-1day',
      until: 'now',
      bgcolor: 'FFFFFF',
      fgcolor: '000000',
      yMin: 0,
      tz: 'America/Denver',
      height: 400
    });
    clusters = ['1', '1_3', '2_14', '3', '4', '5', '6', '7_11', '8', '9_10', '12_13'];
    _load = g.sumSeries(function() {
      var c, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = clusters.length; _i < _len; _i++) {
        c = clusters[_i];
        _results.push(g.multiplySeries(g.s("clusters.app_cluster." + c + ".cpu"), g.s("clusters.app_cluster." + c + ".instances")));
      }
      return _results;
    });
    _capacity = g.sumSeries(g.s("clusters.app_cluster.*.instances"));
    g.target(function() {
      return g.cactiStyle(function() {
        return g.alias('overprovisioning %', function() {
          return g.divideSeries(function() {
            return g.diffSeries(_capacity, _load);
          }, _capacity);
        });
      });
    });
    url = g.render();
    realUrl = "https://graphite.example.com/render/?title=Cluster Overprovisioning&" + "width=1000&from=-1day&until=now&bgcolor=FFFFFF&fgcolor=000000&yMin=0&" + "tz=America/Denver&height=400&" + "target=cactiStyle(" + "alias(" + "divideSeries(" + "diffSeries(" + "sumSeries(clusters.app_cluster.*.instances)," + "sumSeries(" + "multiplySeries(clusters.app_cluster.1.cpu,clusters.app_cluster.1.instances)," + "multiplySeries(clusters.app_cluster.1_3.cpu,clusters.app_cluster.1_3.instances)," + "multiplySeries(clusters.app_cluster.2_14.cpu,clusters.app_cluster.2_14.instances)," + "multiplySeries(clusters.app_cluster.3.cpu,clusters.app_cluster.3.instances)," + "multiplySeries(clusters.app_cluster.4.cpu,clusters.app_cluster.4.instances)," + "multiplySeries(clusters.app_cluster.5.cpu,clusters.app_cluster.5.instances)," + "multiplySeries(clusters.app_cluster.6.cpu,clusters.app_cluster.6.instances)," + "multiplySeries(clusters.app_cluster.7_11.cpu,clusters.app_cluster.7_11.instances)," + "multiplySeries(clusters.app_cluster.8.cpu,clusters.app_cluster.8.instances)," + "multiplySeries(clusters.app_cluster.9_10.cpu,clusters.app_cluster.9_10.instances)," + "multiplySeries(clusters.app_cluster.12_13.cpu,clusters.app_cluster.12_13.instances)" + ")" + ")," + "sumSeries(clusters.app_cluster.*.instances)" + ")," + "'overprovisioning %'))";
    return expect(url).toBe(realUrl);
  });
});
