// Generated by CoffeeScript 1.3.1
var GraphiteUrl,
  __slice = [].slice;

GraphiteUrl = (function() {
  var fname, functions, resolve_arg, _fn, _i, _len;

  GraphiteUrl.name = 'GraphiteUrl';

  function GraphiteUrl(base, attrs) {
    if (attrs == null) {
      attrs = {};
    }
    this.base = base;
    this.attrs = attrs;
    this.targets = [];
  }

  GraphiteUrl.prototype.attr = function(k, v) {
    return this.attrs[k] = v;
  };

  GraphiteUrl.prototype.target = function(target) {
    return this.targets.push(typeof target === "function" ? target() : target);
  };

  GraphiteUrl.prototype.f = function() {
    var args, info, name;
    name = arguments[0], info = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
    return GraphiteUrl.func.apply(GraphiteUrl, [name, info].concat(__slice.call(args)));
  };

  GraphiteUrl.prototype.s = function(string) {
    var s;
    s = new String(string);
    s.seriesList = true;
    return s;
  };

  GraphiteUrl.prototype.render = function() {
    var k, t, v;
    return this.base + '?' + ((function() {
      var _ref, _results;
      _ref = this.attrs;
      _results = [];
      for (k in _ref) {
        v = _ref[k];
        _results.push("" + k + "=" + v);
      }
      return _results;
    }).call(this)).join('&') + '&' + ((function() {
      var _i, _len, _ref, _results;
      _ref = this.targets;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        t = _ref[_i];
        _results.push("target=" + t);
      }
      return _results;
    }).call(this)).join('&');
  };

  resolve_arg = function(arg, result) {
    var a, _i, _len, _results;
    if (arg instanceof Array) {
      _results = [];
      for (_i = 0, _len = arg.length; _i < _len; _i++) {
        a = arg[_i];
        _results.push(resolve_arg(a, result));
      }
      return _results;
    } else if (typeof arg === "function") {
      return resolve_arg(arg(), result);
    } else if (arg.seriesList === true) {
      return result.push(arg);
    } else {
      return result.push("'" + arg + "'");
    }
  };

  GraphiteUrl.func = function() {
    var a, args, flattened_args, name, _i, _len;
    name = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    flattened_args = [];
    for (_i = 0, _len = args.length; _i < _len; _i++) {
      a = args[_i];
      resolve_arg(a, flattened_args);
    }
    return "" + name + "(" + (flattened_args.join(',')) + ")";
  };

  functions = ['alias', 'aliasByNode', 'aliasSub', 'alpha', 'areaBetween', 'asPercent', 'averageAbove', 'averageBelow', 'averageSeries', 'averageSeriesWithWildcards', 'cactiStyle', 'color', 'constantLine', 'cumulative', 'currentAbove', 'currentBelow', 'dashed', 'derivative', 'diffSeries', 'divideSeries', 'drawAsInfinite', 'events', 'exclude', 'groupByNode', 'highestAverage', 'highestCurrent', 'highestMax', 'hitcount', 'holtWintersAberration', 'holtWintersConfidenceBands', 'holtWintersForecast', 'integral', 'keepLastValue', 'legendValue', 'limit', 'lineWidth', 'logarithm', 'lowestAverage', 'lowestCurrent', 'maxSeries', 'maximumAbove', 'maximumBelow', 'minSeries', 'minimumAbove', 'mostDeviant', 'movingAverage', 'movingMedian', 'multiplySeries', 'nPercentile', 'nonNegativeDerivative', 'offset', 'randomWalkFunction', 'rangeOfSeries', 'removeAbovePercentile', 'removeAboveValue', 'removeBelowPercentile', 'removeBelowValue', 'scale', 'secondYAxis', 'sinFunction', 'smartSummarize', 'sortByMaxima', 'sortByMinima', 'stacked', 'stdev', 'substr', 'sumSeries', 'sumSeriesWithWildcards', 'summarize', 'threshold', 'timeFunction', 'timeShift'];

  _fn = function(fname) {
    return GraphiteUrl.prototype[fname] = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return GraphiteUrl.func.apply(GraphiteUrl, [fname].concat(__slice.call(args)));
    };
  };
  for (_i = 0, _len = functions.length; _i < _len; _i++) {
    fname = functions[_i];
    _fn(fname);
  }

  return GraphiteUrl;

})();
